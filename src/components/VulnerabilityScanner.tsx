import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useToast } from '@/hooks/use-toast';
import { Shield, Search, AlertTriangle, CheckCircle, XCircle, Database } from 'lucide-react';

interface VulnerabilityScannerProps {
  onScanStart: () => void;
  onScanEnd: () => void;
}

interface Vulnerability {
  id: string;
  cve: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  description: string;
  exploitAvailable: boolean;
  service: string;
  port: number;
}

export const VulnerabilityScanner: React.FC<VulnerabilityScannerProps> = ({ onScanStart, onScanEnd }) => {
  const { toast } = useToast();
  const [target, setTarget] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [scanStats, setScanStats] = useState({
    total: 0,
    critical: 0,
    high: 0,
    medium: 0,
    low: 0,
  });

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: '1',
      cve: 'CVE-2023-0001',
      title: 'Apache HTTP Server Remote Code Execution',
      severity: 'critical',
      description: 'Remote code execution vulnerability in Apache HTTP Server versions prior to 2.4.52',
      exploitAvailable: true,
      service: 'Apache',
      port: 80,
    },
    {
      id: '2', 
      cve: 'CVE-2023-0002',
      title: 'OpenSSH Authentication Bypass',
      severity: 'high',
      description: 'Authentication bypass vulnerability in OpenSSH versions 8.0-8.2',
      exploitAvailable: false,
      service: 'SSH',
      port: 22,
    },
    {
      id: '3',
      cve: 'CVE-2023-0003', 
      title: 'MySQL Information Disclosure',
      severity: 'medium',
      description: 'Information disclosure vulnerability in MySQL 8.0.x',
      exploitAvailable: true,
      service: 'MySQL',
      port: 3306,
    },
  ];

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-destructive text-destructive-foreground';
      case 'high': return 'bg-warning text-warning-foreground';
      case 'medium': return 'bg-scan-orange text-warning-foreground';
      case 'low': return 'bg-muted text-muted-foreground';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const simulateVulnerabilityScan = async () => {
    if (!target) {
      toast({
        title: "Error",
        description: "Please enter a target IP or hostname",
        variant: "destructive",
      });
      return;
    }

    setIsScanning(true);
    setProgress(0);
    setVulnerabilities([]);
    setScanStats({ total: 0, critical: 0, high: 0, medium: 0, low: 0 });
    onScanStart();

    // Simulate scanning process
    for (let i = 0; i <= 100; i += 10) {
      await new Promise(resolve => setTimeout(resolve, 200));
      setProgress(i);
      
      // Add vulnerabilities at different stages
      if (i === 30) {
        const vuln = mockVulnerabilities[0];
        setVulnerabilities(prev => [...prev, vuln]);
        setScanStats(prev => ({ ...prev, total: prev.total + 1, critical: prev.critical + 1 }));
      } else if (i === 60) {
        const vuln = mockVulnerabilities[1];
        setVulnerabilities(prev => [...prev, vuln]);
        setScanStats(prev => ({ ...prev, total: prev.total + 1, high: prev.high + 1 }));
      } else if (i === 90) {
        const vuln = mockVulnerabilities[2];
        setVulnerabilities(prev => [...prev, vuln]);
        setScanStats(prev => ({ ...prev, total: prev.total + 1, medium: prev.medium + 1 }));
      }
    }

    toast({
      title: "Vulnerability Scan Complete",
      description: `Found ${vulnerabilities.length + 1} vulnerabilities on ${target}`,
    });

    setIsScanning(false);
    onScanEnd();
  };

  return (
    <div className="space-y-6">
      {/* Configuration */}
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Database className="h-5 w-5 text-primary" />
            Vulnerability Scanner (Exploit-DB)
          </CardTitle>
          <CardDescription>
            Check target against known vulnerabilities and exploits
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4">
            <div className="flex-1 space-y-2">
              <Label htmlFor="vuln-target">Target (IP/Hostname)</Label>
              <Input
                id="vuln-target"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                placeholder="192.168.1.1 or example.com"
                disabled={isScanning}
                className="bg-input border-border"
              />
            </div>
            <div className="flex items-end">
              <Button 
                onClick={simulateVulnerabilityScan} 
                disabled={isScanning}
                className="bg-primary hover:bg-primary/90"
              >
                <Search className="h-4 w-4 mr-2" />
                {isScanning ? 'Scanning...' : 'Start Scan'}
              </Button>
            </div>
          </div>
          
          {isScanning && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>Checking exploit database...</span>
                <span>{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {/* Statistics */}
      {scanStats.total > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-foreground">{scanStats.total}</div>
              <div className="text-sm text-muted-foreground">Total</div>
            </CardContent>
          </Card>
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-destructive">{scanStats.critical}</div>
              <div className="text-sm text-muted-foreground">Critical</div>
            </CardContent>
          </Card>
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-warning">{scanStats.high}</div>
              <div className="text-sm text-muted-foreground">High</div>
            </CardContent>
          </Card>
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-scan-orange">{scanStats.medium}</div>
              <div className="text-sm text-muted-foreground">Medium</div>
            </CardContent>
          </Card>
          <Card className="bg-card border-border">
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-muted-foreground">{scanStats.low}</div>
              <div className="text-sm text-muted-foreground">Low</div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Vulnerabilities List */}
      <Card className="bg-card border-border">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="h-5 w-5 text-warning" />
            Discovered Vulnerabilities
          </CardTitle>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-96">
            <div className="space-y-4">
              {vulnerabilities.map((vuln) => (
                <Card key={vuln.id} className="bg-secondary border-border">
                  <CardContent className="p-4">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <Badge className={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <Badge variant="outline" className="border-accent text-accent">
                          {vuln.cve}
                        </Badge>
                        {vuln.exploitAvailable && (
                          <Badge className="bg-destructive text-destructive-foreground">
                            Exploit Available
                          </Badge>
                        )}
                      </div>
                      <div className="flex items-center gap-1 text-sm text-muted-foreground">
                        <Shield className="h-3 w-3" />
                        {vuln.service}:{vuln.port}
                      </div>
                    </div>
                    <h3 className="font-semibold text-foreground mb-2">{vuln.title}</h3>
                    <p className="text-sm text-muted-foreground">{vuln.description}</p>
                    <div className="flex items-center justify-between mt-3">
                      <div className="flex items-center gap-2">
                        {vuln.exploitAvailable ? (
                          <XCircle className="h-4 w-4 text-destructive" />
                        ) : (
                          <CheckCircle className="h-4 w-4 text-success" />
                        )}
                        <span className="text-xs text-muted-foreground">
                          {vuln.exploitAvailable ? 'Exploit in database' : 'No exploit available'}
                        </span>
                      </div>
                      <Button size="sm" variant="outline" className="border-primary text-primary hover:bg-primary hover:text-primary-foreground">
                        View Details
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
              {vulnerabilities.length === 0 && !isScanning && (
                <div className="text-center text-muted-foreground py-8">
                  No vulnerabilities found. Start a scan to check for known exploits.
                </div>
              )}
            </div>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
};